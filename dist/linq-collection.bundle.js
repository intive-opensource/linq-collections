/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Collections.ts":
/*!****************************!*\
  !*** ./src/Collections.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// -\r\n// Created by Ivan Sanz (@isc30)\r\n// Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n// -\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enumerables_1 = __webpack_require__(/*! ./Enumerables */ \"./src/Enumerables.ts\");\r\nvar Comparers_1 = __webpack_require__(/*! ./Comparers */ \"./src/Comparers.ts\");\r\n// endregion\r\n// region EnumerableCollection\r\nvar EnumerableCollection = /** @class */ (function () {\r\n    function EnumerableCollection() {\r\n    }\r\n    EnumerableCollection.prototype.toList = function () {\r\n        return new List(this.toArray());\r\n    };\r\n    EnumerableCollection.prototype.toDictionary = function (keySelector, valueSelector) {\r\n        return Dictionary.fromArray(this.toArray(), keySelector, valueSelector);\r\n    };\r\n    EnumerableCollection.prototype.reverse = function () {\r\n        return new Enumerables_1.ReverseEnumerable(this.asEnumerable());\r\n    };\r\n    EnumerableCollection.prototype.concat = function (other) {\r\n        var others = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            others[_i - 1] = arguments[_i];\r\n        }\r\n        return (_a = this.asEnumerable()).concat.apply(_a, [other].concat(others));\r\n        var _a;\r\n    };\r\n    EnumerableCollection.prototype.contains = function (element) {\r\n        return this.any(function (e) { return e === element; });\r\n    };\r\n    EnumerableCollection.prototype.where = function (predicate) {\r\n        return new Enumerables_1.ConditionalEnumerable(this.asEnumerable(), predicate);\r\n    };\r\n    EnumerableCollection.prototype.select = function (selector) {\r\n        return new Enumerables_1.TransformEnumerable(this.asEnumerable(), selector);\r\n    };\r\n    EnumerableCollection.prototype.selectMany = function (selector) {\r\n        var selectToEnumerable = function (e) {\r\n            var ie = selector(e);\r\n            return ie instanceof Array\r\n                ? new Enumerables_1.ArrayEnumerable(ie)\r\n                : ie.asEnumerable();\r\n        };\r\n        return this\r\n            .select(selectToEnumerable).toArray()\r\n            .reduce(function (p, c) { return new Enumerables_1.ConcatEnumerable(p, c); }, Enumerables_1.Enumerable.empty());\r\n    };\r\n    EnumerableCollection.prototype.elementAt = function (index) {\r\n        var element = this.elementAtOrDefault(index);\r\n        if (element === undefined) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableCollection.prototype.except = function (other) {\r\n        return this.asEnumerable().except(other);\r\n    };\r\n    EnumerableCollection.prototype.first = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.firstOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.firstOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableCollection.prototype.groupBy = function (keySelector, valueSelector) {\r\n        var array = this.toArray();\r\n        var dictionary = new Dictionary();\r\n        for (var i = 0; i < array.length; ++i) {\r\n            var key = keySelector(array[i]);\r\n            var value = valueSelector !== undefined\r\n                ? valueSelector(array[i])\r\n                : array[i];\r\n            if (!dictionary.containsKey(key)) {\r\n                dictionary.set(key, new List());\r\n            }\r\n            dictionary.get(key).push(value);\r\n        }\r\n        return dictionary.asEnumerable();\r\n    };\r\n    EnumerableCollection.prototype.last = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.lastOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.lastOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableCollection.prototype.single = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.singleOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.singleOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableCollection.prototype.singleOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.asEnumerable().singleOrDefault(predicate);\r\n        }\r\n        return this.asEnumerable().singleOrDefault();\r\n    };\r\n    EnumerableCollection.prototype.skipWhile = function (predicate) {\r\n        return this.asEnumerable().skipWhile(predicate);\r\n    };\r\n    EnumerableCollection.prototype.takeWhile = function (predicate) {\r\n        return this.asEnumerable().takeWhile(predicate);\r\n    };\r\n    EnumerableCollection.prototype.sequenceEqual = function (other, comparer) {\r\n        if (comparer !== undefined) {\r\n            return this.asEnumerable().sequenceEqual(other, comparer);\r\n        }\r\n        return this.asEnumerable().sequenceEqual(other);\r\n    };\r\n    EnumerableCollection.prototype.distinct = function (keySelector) {\r\n        return new Enumerables_1.UniqueEnumerable(this.asEnumerable(), keySelector);\r\n    };\r\n    EnumerableCollection.prototype.min = function (selector) {\r\n        if (selector !== undefined) {\r\n            // Don't copy iterators\r\n            return new Enumerables_1.TransformEnumerable(this.asEnumerable(), selector).min();\r\n        }\r\n        return this.aggregate(function (previous, current) {\r\n            return (previous !== undefined && previous < current)\r\n                ? previous\r\n                : current;\r\n        });\r\n    };\r\n    EnumerableCollection.prototype.orderBy = function (keySelector, comparer) {\r\n        return new Enumerables_1.OrderedEnumerable(this.asEnumerable(), Comparers_1.createComparer(keySelector, true, comparer));\r\n    };\r\n    EnumerableCollection.prototype.orderByDescending = function (keySelector) {\r\n        return new Enumerables_1.OrderedEnumerable(this.asEnumerable(), Comparers_1.createComparer(keySelector, false, undefined));\r\n    };\r\n    EnumerableCollection.prototype.max = function (selector) {\r\n        if (selector !== undefined) {\r\n            // Don't copy iterators\r\n            return new Enumerables_1.TransformEnumerable(this.asEnumerable(), selector).max();\r\n        }\r\n        return this.aggregate(function (previous, current) {\r\n            return (previous !== undefined && previous > current)\r\n                ? previous\r\n                : current;\r\n        });\r\n    };\r\n    EnumerableCollection.prototype.sum = function (selector) {\r\n        return this.aggregate(function (previous, current) { return previous + selector(current); }, 0);\r\n    };\r\n    EnumerableCollection.prototype.skip = function (amount) {\r\n        return new Enumerables_1.RangeEnumerable(this.asEnumerable(), amount, undefined);\r\n    };\r\n    EnumerableCollection.prototype.take = function (amount) {\r\n        return new Enumerables_1.RangeEnumerable(this.asEnumerable(), undefined, amount);\r\n    };\r\n    EnumerableCollection.prototype.union = function (other) {\r\n        return new Enumerables_1.UniqueEnumerable(this.concat(other));\r\n    };\r\n    EnumerableCollection.prototype.aggregate = function (aggregator, initialValue) {\r\n        if (initialValue !== undefined) {\r\n            return this.asEnumerable().aggregate(aggregator, initialValue);\r\n        }\r\n        return this.asEnumerable().aggregate(aggregator);\r\n    };\r\n    EnumerableCollection.prototype.any = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.asEnumerable().any(predicate);\r\n        }\r\n        return this.asEnumerable().any();\r\n    };\r\n    EnumerableCollection.prototype.all = function (predicate) {\r\n        return this.asEnumerable().all(predicate);\r\n    };\r\n    EnumerableCollection.prototype.average = function (selector) {\r\n        return this.asEnumerable().average(selector);\r\n    };\r\n    EnumerableCollection.prototype.count = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.asEnumerable().count(predicate);\r\n        }\r\n        return this.asEnumerable().count();\r\n    };\r\n    EnumerableCollection.prototype.elementAtOrDefault = function (index) {\r\n        return this.asEnumerable().elementAtOrDefault(index);\r\n    };\r\n    EnumerableCollection.prototype.firstOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.asEnumerable().firstOrDefault(predicate);\r\n        }\r\n        return this.asEnumerable().firstOrDefault();\r\n    };\r\n    EnumerableCollection.prototype.lastOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.asEnumerable().lastOrDefault(predicate);\r\n        }\r\n        return this.asEnumerable().lastOrDefault();\r\n    };\r\n    EnumerableCollection.prototype.forEach = function (action) {\r\n        return this.asEnumerable().forEach(action);\r\n    };\r\n    EnumerableCollection.prototype.defaultIfEmpty = function (defaultValue) {\r\n        if (defaultValue !== undefined) {\r\n            return this.asEnumerable().defaultIfEmpty(defaultValue);\r\n        }\r\n        return this.asEnumerable().defaultIfEmpty();\r\n    };\r\n    return EnumerableCollection;\r\n}());\r\nexports.EnumerableCollection = EnumerableCollection;\r\n// endregion\r\n// region ArrayQueryable\r\nvar ArrayQueryable = /** @class */ (function (_super) {\r\n    __extends(ArrayQueryable, _super);\r\n    function ArrayQueryable(elements) {\r\n        if (elements === void 0) { elements = []; }\r\n        var _this = _super.call(this) || this;\r\n        _this.source = elements;\r\n        return _this;\r\n    }\r\n    ArrayQueryable.prototype.asArray = function () {\r\n        return this.source;\r\n    };\r\n    ArrayQueryable.prototype.toArray = function () {\r\n        return [].concat(this.source);\r\n    };\r\n    ArrayQueryable.prototype.toList = function () {\r\n        return new List(this.toArray());\r\n    };\r\n    ArrayQueryable.prototype.asEnumerable = function () {\r\n        return new Enumerables_1.ArrayEnumerable(this.source);\r\n    };\r\n    ArrayQueryable.prototype.aggregate = function (aggregator, initialValue) {\r\n        if (initialValue !== undefined) {\r\n            return this.source.reduce(aggregator, initialValue);\r\n        }\r\n        return this.source.reduce(aggregator);\r\n    };\r\n    ArrayQueryable.prototype.any = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.source.some(predicate);\r\n        }\r\n        return this.source.length > 0;\r\n    };\r\n    ArrayQueryable.prototype.all = function (predicate) {\r\n        return this.source.every(predicate);\r\n    };\r\n    ArrayQueryable.prototype.average = function (selector) {\r\n        if (this.count() === 0) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        var sum = 0;\r\n        for (var i = 0, end = this.source.length; i < end; ++i) {\r\n            sum += selector(this.source[i]);\r\n        }\r\n        return sum / this.source.length;\r\n    };\r\n    ArrayQueryable.prototype.count = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.source.filter(predicate).length;\r\n        }\r\n        return this.source.length;\r\n    };\r\n    ArrayQueryable.prototype.elementAtOrDefault = function (index) {\r\n        if (index < 0) {\r\n            throw new Error(\"Negative index is forbiden\");\r\n        }\r\n        return this.source[index];\r\n    };\r\n    ArrayQueryable.prototype.firstOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.source.filter(predicate)[0];\r\n        }\r\n        return this.source[0];\r\n    };\r\n    ArrayQueryable.prototype.groupBy = function (keySelector, valueSelector) {\r\n        var array = this.asArray();\r\n        var dictionary = new Dictionary();\r\n        for (var i = 0; i < array.length; ++i) {\r\n            var key = keySelector(array[i]);\r\n            var value = valueSelector !== undefined\r\n                ? valueSelector(array[i])\r\n                : array[i];\r\n            if (!dictionary.containsKey(key)) {\r\n                dictionary.set(key, new List());\r\n            }\r\n            dictionary.get(key).push(value);\r\n        }\r\n        return dictionary.asEnumerable();\r\n    };\r\n    ArrayQueryable.prototype.lastOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            var records = this.source.filter(predicate);\r\n            return records[records.length - 1];\r\n        }\r\n        return this.source[this.source.length - 1];\r\n    };\r\n    ArrayQueryable.prototype.forEach = function (action) {\r\n        for (var i = 0, end = this.source.length; i < end; ++i) {\r\n            action(this.source[i], i);\r\n        }\r\n    };\r\n    ArrayQueryable.prototype.sequenceEqual = function (other, comparer) {\r\n        if (comparer === void 0) { comparer = Comparers_1.strictEqualityComparer(); }\r\n        if (other instanceof ArrayQueryable\r\n            || other instanceof Array) {\r\n            var thisArray = this.asArray();\r\n            var otherArray = other instanceof ArrayQueryable\r\n                ? other.asArray()\r\n                : other;\r\n            if (thisArray.length != otherArray.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < thisArray.length; ++i) {\r\n                if (!comparer(thisArray[i], otherArray[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return this.asEnumerable().sequenceEqual(other, comparer);\r\n    };\r\n    return ArrayQueryable;\r\n}(EnumerableCollection));\r\nexports.ArrayQueryable = ArrayQueryable;\r\nvar List = /** @class */ (function (_super) {\r\n    __extends(List, _super);\r\n    function List() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    List.prototype.copy = function () {\r\n        return new List(this.toArray());\r\n    };\r\n    List.prototype.asReadOnly = function () {\r\n        return this;\r\n    };\r\n    List.prototype.clear = function () {\r\n        this.source = [];\r\n    };\r\n    List.prototype.remove = function (element) {\r\n        var newSource = [];\r\n        for (var i = 0, end = this.source.length; i < end; ++i) {\r\n            if (this.source[i] !== element) {\r\n                newSource.push(this.source[i]);\r\n            }\r\n        }\r\n        this.source = newSource;\r\n    };\r\n    List.prototype.removeAt = function (index) {\r\n        if (index < 0 || this.source[index] === undefined) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return this.source.splice(index, 1)[0];\r\n    };\r\n    List.prototype.get = function (index) {\r\n        return this.source[index];\r\n    };\r\n    List.prototype.push = function (element) {\r\n        return this.source.push(element);\r\n    };\r\n    List.prototype.pushRange = function (elements) {\r\n        if (!(elements instanceof Array)) {\r\n            elements = elements.toArray();\r\n        }\r\n        return this.source.push.apply(this.source, elements);\r\n    };\r\n    List.prototype.pushFront = function (element) {\r\n        return this.source.unshift(element);\r\n    };\r\n    List.prototype.pop = function () {\r\n        return this.source.pop();\r\n    };\r\n    List.prototype.popFront = function () {\r\n        return this.source.shift();\r\n    };\r\n    List.prototype.set = function (index, element) {\r\n        if (index < 0) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        this.source[index] = element;\r\n    };\r\n    List.prototype.insert = function (index, element) {\r\n        if (index < 0 || index > this.source.length) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        this.source.splice(index, 0, element);\r\n    };\r\n    List.prototype.indexOf = function (element) {\r\n        return this.source.indexOf(element);\r\n    };\r\n    return List;\r\n}(ArrayQueryable));\r\nexports.List = List;\r\nvar Stack = /** @class */ (function (_super) {\r\n    __extends(Stack, _super);\r\n    function Stack() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Stack.prototype.copy = function () {\r\n        return new Stack(this.toArray());\r\n    };\r\n    Stack.prototype.clear = function () {\r\n        this.source = [];\r\n    };\r\n    Stack.prototype.peek = function () {\r\n        return this.source[this.source.length - 1];\r\n    };\r\n    Stack.prototype.pop = function () {\r\n        return this.source.pop();\r\n    };\r\n    Stack.prototype.push = function (element) {\r\n        return this.source.push(element);\r\n    };\r\n    return Stack;\r\n}(ArrayQueryable));\r\nexports.Stack = Stack;\r\nvar Dictionary = /** @class */ (function (_super) {\r\n    __extends(Dictionary, _super);\r\n    function Dictionary(keyValuePairs) {\r\n        var _this = _super.call(this) || this;\r\n        _this.clear();\r\n        if (keyValuePairs !== undefined) {\r\n            for (var i = 0; i < keyValuePairs.length; ++i) {\r\n                var pair = keyValuePairs[i];\r\n                _this.set(pair.key, pair.value);\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    Dictionary.fromArray = function (array, keySelector, valueSelector) {\r\n        var keyValuePairs = array.map(function (v) {\r\n            return {\r\n                key: keySelector(v),\r\n                value: valueSelector(v),\r\n            };\r\n        });\r\n        return new Dictionary(keyValuePairs);\r\n    };\r\n    Dictionary.fromJsObject = function (object) {\r\n        var keys = new List(Object.getOwnPropertyNames(object));\r\n        var keyValues = keys.select(function (k) { return ({ key: k, value: object[k] }); });\r\n        return new Dictionary(keyValues.toArray());\r\n    };\r\n    Dictionary.prototype.copy = function () {\r\n        return new Dictionary(this.toArray());\r\n    };\r\n    Dictionary.prototype.asReadOnly = function () {\r\n        return this;\r\n    };\r\n    Dictionary.prototype.asEnumerable = function () {\r\n        return new Enumerables_1.ArrayEnumerable(this.toArray());\r\n    };\r\n    Dictionary.prototype.toArray = function () {\r\n        var _this = this;\r\n        return this.getKeys().select(function (p) {\r\n            return {\r\n                key: p,\r\n                value: _this.dictionary[p],\r\n            };\r\n        }).toArray();\r\n    };\r\n    Dictionary.prototype.clear = function () {\r\n        this.dictionary = {};\r\n    };\r\n    Dictionary.prototype.containsKey = function (key) {\r\n        return this.dictionary.hasOwnProperty(key);\r\n    };\r\n    Dictionary.prototype.containsValue = function (value) {\r\n        var keys = this.getKeysFast();\r\n        for (var i = 0; i < keys.length; ++i) {\r\n            if (this.dictionary[keys[i]] === value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Dictionary.prototype.getKeys = function () {\r\n        var _this = this;\r\n        var keys = this.getKeysFast();\r\n        return new List(keys.map(function (k) { return _this.keyType === \"number\"\r\n            ? parseFloat(k)\r\n            : k; }));\r\n    };\r\n    Dictionary.prototype.getKeysFast = function () {\r\n        return Object.getOwnPropertyNames(this.dictionary);\r\n    };\r\n    Dictionary.prototype.getValues = function () {\r\n        var keys = this.getKeysFast();\r\n        var result = new Array(keys.length);\r\n        for (var i = 0; i < keys.length; ++i) {\r\n            result[i] = this.dictionary[keys[i]];\r\n        }\r\n        return new List(result);\r\n    };\r\n    Dictionary.prototype.remove = function (key) {\r\n        if (this.containsKey(key)) {\r\n            delete this.dictionary[key];\r\n        }\r\n    };\r\n    Dictionary.prototype.get = function (key) {\r\n        if (!this.containsKey(key)) {\r\n            throw new Error(\"Key doesn't exist: \" + key);\r\n        }\r\n        return this.dictionary[key];\r\n    };\r\n    Dictionary.prototype.set = function (key, value) {\r\n        if (this.containsKey(key)) {\r\n            throw new Error(\"Key already exists: \" + key);\r\n        }\r\n        this.setOrUpdate(key, value);\r\n    };\r\n    Dictionary.prototype.setOrUpdate = function (key, value) {\r\n        if (this.keyType === undefined) {\r\n            this.keyType = typeof key;\r\n        }\r\n        this.dictionary[key] = value;\r\n    };\r\n    return Dictionary;\r\n}(EnumerableCollection));\r\nexports.Dictionary = Dictionary;\r\n// endregion\r\n\n\n//# sourceURL=webpack:///./src/Collections.ts?");

/***/ }),

/***/ "./src/Comparers.ts":
/*!**************************!*\
  !*** ./src/Comparers.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n * Created by Ivan Sanz (@isc30)\r\n * Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.strictEqualityComparer = function () { return function (left, right) { return left === right; }; };\r\nfunction combineComparers(left, right) {\r\n    return function (l, r) { return left(l, r) || right(l, r); };\r\n}\r\nexports.combineComparers = combineComparers;\r\nfunction createComparer(keySelector, ascending, customComparer) {\r\n    if (customComparer !== undefined) {\r\n        return function (l, r) { return customComparer(keySelector(l), keySelector(r)); };\r\n    }\r\n    return ascending\r\n        ? function (l, r) {\r\n            var left = keySelector(l);\r\n            var right = keySelector(r);\r\n            return left < right\r\n                ? -1\r\n                : left > right\r\n                    ? 1\r\n                    : 0;\r\n        }\r\n        : function (l, r) {\r\n            var left = keySelector(l);\r\n            var right = keySelector(r);\r\n            return left < right\r\n                ? 1\r\n                : left > right\r\n                    ? -1\r\n                    : 0;\r\n        };\r\n}\r\nexports.createComparer = createComparer;\r\n\n\n//# sourceURL=webpack:///./src/Comparers.ts?");

/***/ }),

/***/ "./src/Enumerables.ts":
/*!****************************!*\
  !*** ./src/Enumerables.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// -\r\n// Created by Ivan Sanz (@isc30)\r\n// Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n// -\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Iterators_1 = __webpack_require__(/*! ./Iterators */ \"./src/Iterators.ts\");\r\nvar Comparers_1 = __webpack_require__(/*! ./Comparers */ \"./src/Comparers.ts\");\r\nvar Collections_1 = __webpack_require__(/*! ./Collections */ \"./src/Collections.ts\");\r\nvar Utils_1 = __webpack_require__(/*! ./Utils */ \"./src/Utils.ts\");\r\n// endregion\r\n// region EnumerableBase\r\nvar EnumerableBase = /** @class */ (function () {\r\n    function EnumerableBase(source) {\r\n        this.source = source;\r\n    }\r\n    EnumerableBase.prototype.reset = function () {\r\n        this.source.reset();\r\n    };\r\n    EnumerableBase.prototype.next = function () {\r\n        return this.source.next();\r\n    };\r\n    EnumerableBase.prototype.asEnumerable = function () {\r\n        return this;\r\n    };\r\n    EnumerableBase.prototype.toArray = function () {\r\n        var result = [];\r\n        this.reset();\r\n        while (this.next()) {\r\n            result.push(this.value());\r\n        }\r\n        return result;\r\n    };\r\n    EnumerableBase.prototype.toList = function () {\r\n        return new Collections_1.List(this.toArray());\r\n    };\r\n    EnumerableBase.prototype.toDictionary = function (keySelector, valueSelector) {\r\n        return Collections_1.Dictionary.fromArray(this.toArray(), keySelector, valueSelector);\r\n    };\r\n    EnumerableBase.prototype.count = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            // Don't copy iterators\r\n            return new ConditionalEnumerable(this, predicate).count();\r\n        }\r\n        var result = 0;\r\n        this.reset();\r\n        while (this.next()) {\r\n            ++result;\r\n        }\r\n        // tslint:disable-next-line:no-bitwise\r\n        return result >>> 0;\r\n    };\r\n    EnumerableBase.prototype.any = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            // Don't copy iterators\r\n            return new ConditionalEnumerable(this, predicate).any();\r\n        }\r\n        this.reset();\r\n        return this.next();\r\n    };\r\n    EnumerableBase.prototype.all = function (predicate) {\r\n        this.reset();\r\n        while (this.next()) {\r\n            if (!predicate(this.value())) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    EnumerableBase.prototype.reverse = function () {\r\n        return new ReverseEnumerable(this.copy());\r\n    };\r\n    EnumerableBase.prototype.contains = function (element) {\r\n        return this.any(function (e) { return e === element; });\r\n    };\r\n    EnumerableBase.prototype.sequenceEqual = function (other, comparer) {\r\n        if (comparer === void 0) { comparer = Comparers_1.strictEqualityComparer(); }\r\n        var otherEnumerable = other instanceof Array\r\n            ? new ArrayEnumerable(other)\r\n            : other.asEnumerable();\r\n        this.reset();\r\n        otherEnumerable.reset();\r\n        while (this.next()) {\r\n            if (!otherEnumerable.next() || !comparer(this.value(), otherEnumerable.value())) {\r\n                return false;\r\n            }\r\n        }\r\n        return !otherEnumerable.next();\r\n    };\r\n    EnumerableBase.prototype.where = function (predicate) {\r\n        return new ConditionalEnumerable(this.copy(), predicate);\r\n    };\r\n    EnumerableBase.prototype.select = function (selector) {\r\n        return new TransformEnumerable(this.copy(), selector);\r\n    };\r\n    EnumerableBase.prototype.selectMany = function (selector) {\r\n        var selectToEnumerable = function (e) {\r\n            var ie = selector(e);\r\n            return Array.isArray(ie)\r\n                ? new ArrayEnumerable(ie)\r\n                : ie.asEnumerable();\r\n        };\r\n        return this\r\n            .select(selectToEnumerable).toArray()\r\n            .reduce(function (p, c) { return new ConcatEnumerable(p, c); }, Enumerable.empty());\r\n    };\r\n    EnumerableBase.prototype.skipWhile = function (predicate) {\r\n        return new SkipWhileEnumerable(this.copy(), predicate);\r\n    };\r\n    EnumerableBase.prototype.concat = function (other) {\r\n        var others = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            others[_i - 1] = arguments[_i];\r\n        }\r\n        var asEnumerable = function (e) {\r\n            return e instanceof Array\r\n                ? new ArrayEnumerable(e)\r\n                : e.asEnumerable();\r\n        };\r\n        var result = new ConcatEnumerable(this.copy(), asEnumerable(other).copy());\r\n        for (var i = 0, end = others.length; i < end; ++i) {\r\n            result = new ConcatEnumerable(result, asEnumerable(others[i]).copy());\r\n        }\r\n        return result;\r\n    };\r\n    EnumerableBase.prototype.defaultIfEmpty = function (defaultValue) {\r\n        return new DefaultIfEmptyEnumerable(this, defaultValue);\r\n    };\r\n    EnumerableBase.prototype.elementAt = function (index) {\r\n        var element = this.elementAtOrDefault(index);\r\n        if (element === undefined) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableBase.prototype.elementAtOrDefault = function (index) {\r\n        if (index < 0) {\r\n            throw new Error(\"Negative index is forbiden\");\r\n        }\r\n        this.reset();\r\n        var currentIndex = -1;\r\n        while (this.next()) {\r\n            ++currentIndex;\r\n            if (currentIndex === index) {\r\n                break;\r\n            }\r\n        }\r\n        if (currentIndex !== index) {\r\n            return undefined;\r\n        }\r\n        return this.value();\r\n    };\r\n    EnumerableBase.prototype.except = function (other) {\r\n        return this.where(function (e) { return !other.contains(e); });\r\n    };\r\n    EnumerableBase.prototype.first = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.firstOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.firstOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableBase.prototype.firstOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            // Don't copy iterators\r\n            return new ConditionalEnumerable(this, predicate).firstOrDefault();\r\n        }\r\n        this.reset();\r\n        if (!this.next()) {\r\n            return undefined;\r\n        }\r\n        return this.value();\r\n    };\r\n    EnumerableBase.prototype.forEach = function (action) {\r\n        this.reset();\r\n        for (var i = 0; this.next(); ++i) {\r\n            action(this.value(), i);\r\n        }\r\n    };\r\n    EnumerableBase.prototype.groupBy = function (keySelector, valueSelector) {\r\n        var array = this.toArray();\r\n        var dictionary = new Collections_1.Dictionary();\r\n        for (var i = 0; i < array.length; ++i) {\r\n            var key = keySelector(array[i]);\r\n            var value = valueSelector !== undefined\r\n                ? valueSelector(array[i])\r\n                : array[i];\r\n            if (!dictionary.containsKey(key)) {\r\n                dictionary.set(key, new Collections_1.List());\r\n            }\r\n            dictionary.get(key).push(value);\r\n        }\r\n        return dictionary.asEnumerable();\r\n    };\r\n    EnumerableBase.prototype.last = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.lastOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.lastOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableBase.prototype.lastOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            // Don't copy iterators\r\n            return new ConditionalEnumerable(this, predicate).lastOrDefault();\r\n        }\r\n        var reversed = new ReverseEnumerable(this);\r\n        reversed.reset();\r\n        if (!reversed.next()) {\r\n            return undefined;\r\n        }\r\n        return reversed.value();\r\n    };\r\n    EnumerableBase.prototype.single = function (predicate) {\r\n        var element;\r\n        if (predicate !== undefined) {\r\n            element = this.singleOrDefault(predicate);\r\n        }\r\n        else {\r\n            element = this.singleOrDefault();\r\n        }\r\n        if (element === undefined) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableBase.prototype.singleOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            // Don't copy iterators\r\n            return new ConditionalEnumerable(this, predicate).singleOrDefault();\r\n        }\r\n        this.reset();\r\n        if (!this.next()) {\r\n            return undefined;\r\n        }\r\n        var element = this.value();\r\n        if (this.next()) {\r\n            throw new Error(\"Sequence contains more than 1 element\");\r\n        }\r\n        return element;\r\n    };\r\n    EnumerableBase.prototype.distinct = function (keySelector) {\r\n        return new UniqueEnumerable(this.copy(), keySelector);\r\n    };\r\n    EnumerableBase.prototype.aggregate = function (aggregator, initialValue) {\r\n        var value = initialValue;\r\n        this.reset();\r\n        if (initialValue === undefined) {\r\n            if (!this.next()) {\r\n                throw new Error(\"Sequence contains no elements\");\r\n            }\r\n            value = aggregator(value, this.value());\r\n        }\r\n        while (this.next()) {\r\n            value = aggregator(value, this.value());\r\n        }\r\n        return value;\r\n    };\r\n    EnumerableBase.prototype.min = function (selector) {\r\n        if (selector !== undefined) {\r\n            // Don't copy iterators\r\n            return new TransformEnumerable(this, selector).min();\r\n        }\r\n        return this.aggregate(function (previous, current) {\r\n            return (previous !== undefined && previous < current)\r\n                ? previous\r\n                : current;\r\n        });\r\n    };\r\n    EnumerableBase.prototype.orderBy = function (keySelector, comparer) {\r\n        return new OrderedEnumerable(this.copy(), Comparers_1.createComparer(keySelector, true, comparer));\r\n    };\r\n    EnumerableBase.prototype.orderByDescending = function (keySelector) {\r\n        return new OrderedEnumerable(this.copy(), Comparers_1.createComparer(keySelector, false, undefined));\r\n    };\r\n    EnumerableBase.prototype.max = function (selector) {\r\n        if (selector !== undefined) {\r\n            // Don't copy iterators\r\n            return new TransformEnumerable(this, selector).max();\r\n        }\r\n        return this.aggregate(function (previous, current) {\r\n            return (previous !== undefined && previous > current)\r\n                ? previous\r\n                : current;\r\n        });\r\n    };\r\n    EnumerableBase.prototype.sum = function (selector) {\r\n        return this.aggregate(function (previous, current) { return previous + selector(current); }, 0);\r\n    };\r\n    EnumerableBase.prototype.average = function (selector) {\r\n        this.reset();\r\n        if (!this.next()) {\r\n            throw new Error(\"Sequence contains no elements\");\r\n        }\r\n        var sum = 0;\r\n        var count = 0;\r\n        do {\r\n            sum += selector(this.value());\r\n            ++count;\r\n        } while (this.next());\r\n        return sum / count;\r\n    };\r\n    EnumerableBase.prototype.skip = function (amount) {\r\n        return new RangeEnumerable(this.copy(), amount, undefined);\r\n    };\r\n    EnumerableBase.prototype.take = function (amount) {\r\n        return new RangeEnumerable(this.copy(), undefined, amount);\r\n    };\r\n    EnumerableBase.prototype.takeWhile = function (predicate) {\r\n        return new TakeWhileEnumerable(this.copy(), predicate);\r\n    };\r\n    EnumerableBase.prototype.union = function (other) {\r\n        return new UniqueEnumerable(this.concat(other));\r\n    };\r\n    return EnumerableBase;\r\n}());\r\nexports.EnumerableBase = EnumerableBase;\r\n// endregion\r\n// region Enumerable\r\nvar Enumerable = /** @class */ (function (_super) {\r\n    __extends(Enumerable, _super);\r\n    function Enumerable(source) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this.currentValue = new Utils_1.Cached();\r\n        return _this;\r\n    }\r\n    Enumerable.fromSource = function (source) {\r\n        if (source instanceof Array) {\r\n            return new ArrayEnumerable(source);\r\n        }\r\n        return new Enumerable(source);\r\n    };\r\n    Enumerable.empty = function () {\r\n        return Enumerable.fromSource([]);\r\n    };\r\n    Enumerable.range = function (start, count, ascending) {\r\n        if (ascending === void 0) { ascending = true; }\r\n        if (count < 0) {\r\n            throw new Error(\"Count must be >= 0\");\r\n        }\r\n        var source = new Array(count);\r\n        if (ascending) {\r\n            // tslint:disable-next-line:curly\r\n            for (var i = 0; i < count; source[i] = start + (i++))\r\n                ;\r\n        }\r\n        else {\r\n            // tslint:disable-next-line:curly\r\n            for (var i = 0; i < count; source[i] = start - (i++))\r\n                ;\r\n        }\r\n        return new ArrayEnumerable(source);\r\n    };\r\n    Enumerable.repeat = function (element, count) {\r\n        if (count < 0) {\r\n            throw new Error(\"Count must me >= 0\");\r\n        }\r\n        var source = new Array(count);\r\n        for (var i = 0; i < count; ++i) {\r\n            source[i] = element;\r\n        }\r\n        return new ArrayEnumerable(source);\r\n    };\r\n    Enumerable.prototype.copy = function () {\r\n        return new Enumerable(this.source.copy());\r\n    };\r\n    Enumerable.prototype.value = function () {\r\n        if (!this.currentValue.isValid()) {\r\n            this.currentValue.value = this.source.value();\r\n        }\r\n        return this.currentValue.value;\r\n    };\r\n    Enumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this.currentValue.invalidate();\r\n    };\r\n    Enumerable.prototype.next = function () {\r\n        this.currentValue.invalidate();\r\n        return _super.prototype.next.call(this);\r\n    };\r\n    return Enumerable;\r\n}(EnumerableBase));\r\nexports.Enumerable = Enumerable;\r\n// endregion\r\n// region ConditionalEnumerable\r\nvar ConditionalEnumerable = /** @class */ (function (_super) {\r\n    __extends(ConditionalEnumerable, _super);\r\n    function ConditionalEnumerable(source, predicate) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._predicate = predicate;\r\n        return _this;\r\n    }\r\n    ConditionalEnumerable.prototype.copy = function () {\r\n        return new ConditionalEnumerable(this.source.copy(), this._predicate);\r\n    };\r\n    ConditionalEnumerable.prototype.next = function () {\r\n        var hasValue;\r\n        do {\r\n            hasValue = _super.prototype.next.call(this);\r\n        } while (hasValue && !this._predicate(this.value()));\r\n        return hasValue;\r\n    };\r\n    return ConditionalEnumerable;\r\n}(Enumerable));\r\nexports.ConditionalEnumerable = ConditionalEnumerable;\r\n// endregion\r\n// region SkipWhileEnumerable\r\nvar SkipWhileEnumerable = /** @class */ (function (_super) {\r\n    __extends(SkipWhileEnumerable, _super);\r\n    function SkipWhileEnumerable(source, predicate) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._predicate = predicate;\r\n        _this._shouldContinueChecking = true;\r\n        return _this;\r\n    }\r\n    SkipWhileEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._shouldContinueChecking = true;\r\n    };\r\n    SkipWhileEnumerable.prototype.copy = function () {\r\n        return new SkipWhileEnumerable(this.source.copy(), this._predicate);\r\n    };\r\n    SkipWhileEnumerable.prototype.next = function () {\r\n        if (!this._shouldContinueChecking) {\r\n            return _super.prototype.next.call(this);\r\n        }\r\n        var hasValue;\r\n        do {\r\n            hasValue = _super.prototype.next.call(this);\r\n        } while (hasValue && this._predicate(this.value()));\r\n        this._shouldContinueChecking = false;\r\n        return hasValue;\r\n    };\r\n    return SkipWhileEnumerable;\r\n}(Enumerable));\r\nexports.SkipWhileEnumerable = SkipWhileEnumerable;\r\n// endregion\r\n// region TakeWhileEnumerable\r\nvar TakeWhileEnumerable = /** @class */ (function (_super) {\r\n    __extends(TakeWhileEnumerable, _super);\r\n    function TakeWhileEnumerable(source, predicate) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._predicate = predicate;\r\n        _this._shouldContinueTaking = true;\r\n        return _this;\r\n    }\r\n    TakeWhileEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._shouldContinueTaking = true;\r\n    };\r\n    TakeWhileEnumerable.prototype.copy = function () {\r\n        return new TakeWhileEnumerable(this.source.copy(), this._predicate);\r\n    };\r\n    TakeWhileEnumerable.prototype.next = function () {\r\n        if (_super.prototype.next.call(this)) {\r\n            if (this._shouldContinueTaking && this._predicate(this.value())) {\r\n                return true;\r\n            }\r\n        }\r\n        this._shouldContinueTaking = false;\r\n        return false;\r\n    };\r\n    return TakeWhileEnumerable;\r\n}(Enumerable));\r\nexports.TakeWhileEnumerable = TakeWhileEnumerable;\r\n// endregion\r\n// region ConcatEnumerable\r\nvar ConcatEnumerable = /** @class */ (function (_super) {\r\n    __extends(ConcatEnumerable, _super);\r\n    function ConcatEnumerable(left, right) {\r\n        var _this = _super.call(this, left) || this;\r\n        _this._otherSource = right;\r\n        _this._isFirstSourceFinished = false;\r\n        return _this;\r\n    }\r\n    ConcatEnumerable.prototype.copy = function () {\r\n        return new ConcatEnumerable(this.source.copy(), this._otherSource.copy());\r\n    };\r\n    ConcatEnumerable.prototype.reset = function () {\r\n        this.source.reset();\r\n        this._otherSource.reset();\r\n        this._isFirstSourceFinished = false;\r\n        this.currentValue.invalidate();\r\n    };\r\n    ConcatEnumerable.prototype.next = function () {\r\n        this.currentValue.invalidate();\r\n        var hasValue = !this._isFirstSourceFinished\r\n            ? this.source.next()\r\n            : this._otherSource.next();\r\n        if (!hasValue && !this._isFirstSourceFinished) {\r\n            this._isFirstSourceFinished = true;\r\n            return this.next();\r\n        }\r\n        return hasValue;\r\n    };\r\n    ConcatEnumerable.prototype.value = function () {\r\n        if (!this.currentValue.isValid()) {\r\n            this.currentValue.value = !this._isFirstSourceFinished\r\n                ? this.source.value()\r\n                : this._otherSource.value();\r\n        }\r\n        return this.currentValue.value;\r\n    };\r\n    return ConcatEnumerable;\r\n}(Enumerable));\r\nexports.ConcatEnumerable = ConcatEnumerable;\r\n// endregion\r\n// region UniqueEnumerable\r\nvar UniqueEnumerable = /** @class */ (function (_super) {\r\n    __extends(UniqueEnumerable, _super);\r\n    function UniqueEnumerable(source, keySelector) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._keySelector = keySelector;\r\n        _this._seen = { primitive: { number: {}, string: {}, boolean: {} }, complex: [] };\r\n        return _this;\r\n    }\r\n    UniqueEnumerable.prototype.copy = function () {\r\n        return new UniqueEnumerable(this.source.copy(), this._keySelector);\r\n    };\r\n    UniqueEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._seen = { primitive: { number: {}, string: {}, boolean: {} }, complex: [] };\r\n    };\r\n    UniqueEnumerable.prototype.isUnique = function (element) {\r\n        var key = this._keySelector !== undefined\r\n            ? this._keySelector(element)\r\n            : element;\r\n        var type = typeof key;\r\n        return (type in this._seen.primitive)\r\n            ? this._seen.primitive[type].hasOwnProperty(key)\r\n                ? false\r\n                : this._seen.primitive[type][key] = true\r\n            : this._seen.complex.indexOf(key) !== -1\r\n                ? false\r\n                : this._seen.complex.push(key) > -1;\r\n    };\r\n    UniqueEnumerable.prototype.next = function () {\r\n        var hasValue;\r\n        do {\r\n            hasValue = _super.prototype.next.call(this);\r\n        } while (hasValue && !this.isUnique(this.value()));\r\n        return hasValue;\r\n    };\r\n    return UniqueEnumerable;\r\n}(Enumerable));\r\nexports.UniqueEnumerable = UniqueEnumerable;\r\n// endregion\r\n// region RangeEnumerable\r\nvar RangeEnumerable = /** @class */ (function (_super) {\r\n    __extends(RangeEnumerable, _super);\r\n    function RangeEnumerable(source, start, count) {\r\n        var _this = this;\r\n        if ((start !== undefined && start < 0) || (count !== undefined && count < 0)) {\r\n            throw new Error(\"Incorrect parameters\");\r\n        }\r\n        _this = _super.call(this, source) || this;\r\n        _this._start = start;\r\n        _this._count = count;\r\n        _this._currentIndex = -1;\r\n        return _this;\r\n    }\r\n    RangeEnumerable.prototype.copy = function () {\r\n        return new RangeEnumerable(this.source.copy(), this._start, this._count);\r\n    };\r\n    RangeEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._currentIndex = -1;\r\n    };\r\n    RangeEnumerable.prototype.isValidIndex = function () {\r\n        var start = this._start !== undefined ? this._start : 0;\r\n        var end = this._count !== undefined ? start + this._count : undefined;\r\n        return this._currentIndex >= start && (end === undefined || this._currentIndex < end);\r\n    };\r\n    RangeEnumerable.prototype.performSkip = function () {\r\n        var start = this._start !== undefined ? this._start : 0;\r\n        var hasValue = true;\r\n        while (hasValue && this._currentIndex + 1 < start) {\r\n            hasValue = _super.prototype.next.call(this);\r\n            ++this._currentIndex;\r\n        }\r\n        return hasValue;\r\n    };\r\n    RangeEnumerable.prototype.next = function () {\r\n        if (this._currentIndex < 0 && !this.performSkip()) {\r\n            return false;\r\n        }\r\n        ++this._currentIndex;\r\n        return _super.prototype.next.call(this) && this.isValidIndex();\r\n    };\r\n    RangeEnumerable.prototype.value = function () {\r\n        if (!this.isValidIndex()) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return _super.prototype.value.call(this);\r\n    };\r\n    return RangeEnumerable;\r\n}(Enumerable));\r\nexports.RangeEnumerable = RangeEnumerable;\r\n// endregion\r\n// region TransformEnumerable\r\nvar TransformEnumerable = /** @class */ (function (_super) {\r\n    __extends(TransformEnumerable, _super);\r\n    function TransformEnumerable(source, transform) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._transform = transform;\r\n        _this._currentValue = new Utils_1.Cached();\r\n        return _this;\r\n    }\r\n    TransformEnumerable.prototype.copy = function () {\r\n        return new TransformEnumerable(this.source.copy(), this._transform);\r\n    };\r\n    TransformEnumerable.prototype.value = function () {\r\n        if (!this._currentValue.isValid()) {\r\n            this._currentValue.value = this._transform(this.source.value());\r\n        }\r\n        return this._currentValue.value;\r\n    };\r\n    TransformEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._currentValue.invalidate();\r\n    };\r\n    TransformEnumerable.prototype.next = function () {\r\n        this._currentValue.invalidate();\r\n        return _super.prototype.next.call(this);\r\n    };\r\n    return TransformEnumerable;\r\n}(EnumerableBase));\r\nexports.TransformEnumerable = TransformEnumerable;\r\n// endregion\r\n// region ReverseEnumerable\r\nvar ReverseEnumerable = /** @class */ (function (_super) {\r\n    __extends(ReverseEnumerable, _super);\r\n    function ReverseEnumerable(source) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._elements = new Utils_1.Cached();\r\n        _this._currentIndex = -1;\r\n        return _this;\r\n    }\r\n    ReverseEnumerable.prototype.copy = function () {\r\n        return new ReverseEnumerable(this.source.copy());\r\n    };\r\n    ReverseEnumerable.prototype.reset = function () {\r\n        this._elements.invalidate();\r\n        this._currentIndex = -1;\r\n    };\r\n    ReverseEnumerable.prototype.isValidIndex = function () {\r\n        return this._currentIndex >= 0\r\n            && this._currentIndex < this._elements.value.length;\r\n    };\r\n    ReverseEnumerable.prototype.all = function (predicate) {\r\n        return this.source.all(predicate);\r\n    };\r\n    ReverseEnumerable.prototype.any = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.source.any(predicate);\r\n        }\r\n        return this.source.any();\r\n    };\r\n    ReverseEnumerable.prototype.average = function (selector) {\r\n        return this.source.average(selector);\r\n    };\r\n    ReverseEnumerable.prototype.count = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.source.count(predicate);\r\n        }\r\n        return this.source.count();\r\n    };\r\n    ReverseEnumerable.prototype.max = function (selector) {\r\n        if (selector !== undefined) {\r\n            return this.source.max(selector);\r\n        }\r\n        return this.source.max();\r\n    };\r\n    ReverseEnumerable.prototype.min = function (selector) {\r\n        if (selector !== undefined) {\r\n            return this.source.min(selector);\r\n        }\r\n        return this.source.min();\r\n    };\r\n    ReverseEnumerable.prototype.reverse = function () {\r\n        return this.source.copy(); // haha so smart\r\n    };\r\n    ReverseEnumerable.prototype.sum = function (selector) {\r\n        return this.source.sum(selector);\r\n    };\r\n    ReverseEnumerable.prototype.next = function () {\r\n        if (!this._elements.isValid()) {\r\n            this._elements.value = this.source.toArray();\r\n        }\r\n        ++this._currentIndex;\r\n        return this.isValidIndex();\r\n    };\r\n    ReverseEnumerable.prototype.value = function () {\r\n        if (!this._elements.isValid() || !this.isValidIndex()) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return this._elements.value[(this._elements.value.length - 1) - this._currentIndex];\r\n    };\r\n    return ReverseEnumerable;\r\n}(Enumerable));\r\nexports.ReverseEnumerable = ReverseEnumerable;\r\n// endregion\r\n// region OrderedEnumerable\r\nvar OrderedEnumerable = /** @class */ (function (_super) {\r\n    __extends(OrderedEnumerable, _super);\r\n    function OrderedEnumerable(source, comparer) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._comparer = comparer;\r\n        _this._elements = new Utils_1.Cached();\r\n        _this._currentIndex = -1;\r\n        return _this;\r\n    }\r\n    OrderedEnumerable.prototype.isValidIndex = function () {\r\n        return this._currentIndex >= 0\r\n            && this._currentIndex < this._elements.value.length;\r\n    };\r\n    OrderedEnumerable.prototype.orderBy = function (keySelector, comparer) {\r\n        return new OrderedEnumerable(this.source.copy(), Comparers_1.createComparer(keySelector, true, comparer));\r\n    };\r\n    OrderedEnumerable.prototype.orderByDescending = function (keySelector) {\r\n        return new OrderedEnumerable(this.source.copy(), Comparers_1.createComparer(keySelector, false, undefined));\r\n    };\r\n    OrderedEnumerable.prototype.thenBy = function (keySelector, comparer) {\r\n        return new OrderedEnumerable(this.source.copy(), Comparers_1.combineComparers(this._comparer, Comparers_1.createComparer(keySelector, true, comparer)));\r\n    };\r\n    OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\r\n        return new OrderedEnumerable(this.source.copy(), Comparers_1.combineComparers(this._comparer, Comparers_1.createComparer(keySelector, false, undefined)));\r\n    };\r\n    OrderedEnumerable.prototype.reset = function () {\r\n        this._elements.invalidate();\r\n        this._currentIndex = -1;\r\n    };\r\n    OrderedEnumerable.prototype.copy = function () {\r\n        return new OrderedEnumerable(this.source.copy(), this._comparer);\r\n    };\r\n    OrderedEnumerable.prototype.value = function () {\r\n        if (!this._elements.isValid() || !this.isValidIndex()) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return this._elements.value[this._currentIndex];\r\n    };\r\n    OrderedEnumerable.prototype.next = function () {\r\n        if (!this._elements.isValid()) {\r\n            this._elements.value = this.toArray();\r\n        }\r\n        ++this._currentIndex;\r\n        return this.isValidIndex();\r\n    };\r\n    OrderedEnumerable.prototype.toArray = function () {\r\n        // Allocate the array before sorting\r\n        // It's faster than working with anonymous reference\r\n        var result = this.source.toArray();\r\n        return result.sort(this._comparer);\r\n    };\r\n    return OrderedEnumerable;\r\n}(EnumerableBase));\r\nexports.OrderedEnumerable = OrderedEnumerable;\r\n// endregion\r\n// region ArrayEnumerable\r\nvar ArrayEnumerable = /** @class */ (function (_super) {\r\n    __extends(ArrayEnumerable, _super);\r\n    function ArrayEnumerable(source) {\r\n        var _this = _super.call(this, new Iterators_1.ArrayIterator(source)) || this;\r\n        _this.list = new Collections_1.List(source);\r\n        return _this;\r\n    }\r\n    ArrayEnumerable.prototype.toArray = function () {\r\n        return this.list.toArray();\r\n    };\r\n    ArrayEnumerable.prototype.aggregate = function (aggregator, initialValue) {\r\n        if (initialValue !== undefined) {\r\n            return this.list.aggregate(aggregator, initialValue);\r\n        }\r\n        return this.list.aggregate(aggregator);\r\n    };\r\n    ArrayEnumerable.prototype.any = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.list.any(predicate);\r\n        }\r\n        return this.list.any();\r\n    };\r\n    ArrayEnumerable.prototype.all = function (predicate) {\r\n        return this.list.all(predicate);\r\n    };\r\n    ArrayEnumerable.prototype.average = function (selector) {\r\n        return this.list.average(selector);\r\n    };\r\n    ArrayEnumerable.prototype.count = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.list.count(predicate);\r\n        }\r\n        return this.list.count();\r\n    };\r\n    ArrayEnumerable.prototype.copy = function () {\r\n        return new ArrayEnumerable(this.list.asArray());\r\n    };\r\n    ArrayEnumerable.prototype.elementAtOrDefault = function (index) {\r\n        return this.list.elementAtOrDefault(index);\r\n    };\r\n    ArrayEnumerable.prototype.firstOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.list.firstOrDefault(predicate);\r\n        }\r\n        return this.list.firstOrDefault();\r\n    };\r\n    ArrayEnumerable.prototype.lastOrDefault = function (predicate) {\r\n        if (predicate !== undefined) {\r\n            return this.list.lastOrDefault(predicate);\r\n        }\r\n        return this.list.lastOrDefault();\r\n    };\r\n    return ArrayEnumerable;\r\n}(Enumerable));\r\nexports.ArrayEnumerable = ArrayEnumerable;\r\n// endregion\r\n// region DefaultIfEmptyEnumerable\r\nvar DefaultIfEmptyEnumerable = /** @class */ (function (_super) {\r\n    __extends(DefaultIfEmptyEnumerable, _super);\r\n    function DefaultIfEmptyEnumerable(source, defaultValue) {\r\n        var _this = _super.call(this, source) || this;\r\n        _this._mustUseDefaultValue = undefined;\r\n        _this._defaultValue = defaultValue;\r\n        return _this;\r\n    }\r\n    DefaultIfEmptyEnumerable.prototype.copy = function () {\r\n        return new DefaultIfEmptyEnumerable(this.source.copy(), this._defaultValue);\r\n    };\r\n    DefaultIfEmptyEnumerable.prototype.value = function () {\r\n        if (this._mustUseDefaultValue) {\r\n            return this._defaultValue;\r\n        }\r\n        return this.source.value();\r\n    };\r\n    DefaultIfEmptyEnumerable.prototype.next = function () {\r\n        var hasNextElement = _super.prototype.next.call(this);\r\n        // single default element\r\n        this._mustUseDefaultValue = this._mustUseDefaultValue === undefined && !hasNextElement;\r\n        return this._mustUseDefaultValue || hasNextElement;\r\n    };\r\n    DefaultIfEmptyEnumerable.prototype.reset = function () {\r\n        _super.prototype.reset.call(this);\r\n        this._mustUseDefaultValue = undefined;\r\n    };\r\n    return DefaultIfEmptyEnumerable;\r\n}(EnumerableBase));\r\nexports.DefaultIfEmptyEnumerable = DefaultIfEmptyEnumerable;\r\n// endregion\r\n\n\n//# sourceURL=webpack:///./src/Enumerables.ts?");

/***/ }),

/***/ "./src/Iterators.ts":
/*!**************************!*\
  !*** ./src/Iterators.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n * Created by Ivan Sanz (@isc30)\r\n * Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/* ES6 compatibility layer :D\r\ninterface IteratorResult<T>\r\n{\r\n    done: boolean;\r\n    value: T;\r\n}\r\n\r\ninterface Iterator<T>\r\n{\r\n    next(value?: any): IteratorResult<T>;\r\n    return?(value?: any): IteratorResult<T>;\r\n    throw?(e?: any): IteratorResult<T>;\r\n}*/\r\nvar ArrayIterator = /** @class */ (function () {\r\n    function ArrayIterator(source) {\r\n        this.source = source;\r\n        this.reset();\r\n    }\r\n    ArrayIterator.prototype.copy = function () {\r\n        return new ArrayIterator(this.source);\r\n    };\r\n    ArrayIterator.prototype.reset = function () {\r\n        this._index = -1;\r\n    };\r\n    ArrayIterator.prototype.isValidIndex = function () {\r\n        return this._index >= 0 && this._index < this.source.length;\r\n    };\r\n    ArrayIterator.prototype.next = function () {\r\n        ++this._index;\r\n        return this.isValidIndex();\r\n    };\r\n    ArrayIterator.prototype.value = function () {\r\n        if (!this.isValidIndex()) {\r\n            throw new Error(\"Out of bounds\");\r\n        }\r\n        return this.source[this._index];\r\n    };\r\n    return ArrayIterator;\r\n}());\r\nexports.ArrayIterator = ArrayIterator;\r\n\n\n//# sourceURL=webpack:///./src/Iterators.ts?");

/***/ }),

/***/ "./src/Linq.ts":
/*!*********************!*\
  !*** ./src/Linq.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n * Created by Ivan Sanz (@isc30)\r\n * Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enumerables_1 = __webpack_require__(/*! ./Enumerables */ \"./src/Enumerables.ts\");\r\nexports.Enumerable = Enumerables_1.Enumerable;\r\nvar Iterators_1 = __webpack_require__(/*! ./Iterators */ \"./src/Iterators.ts\");\r\nexports.ArrayIterator = Iterators_1.ArrayIterator;\r\nvar Collections_1 = __webpack_require__(/*! ./Collections */ \"./src/Collections.ts\");\r\nexports.List = Collections_1.List;\r\nexports.Dictionary = Collections_1.Dictionary;\r\nexports.Stack = Collections_1.Stack;\r\nvar Comparers_1 = __webpack_require__(/*! ./Comparers */ \"./src/Comparers.ts\");\r\nexports.strictEqualityComparer = Comparers_1.strictEqualityComparer;\r\n\n\n//# sourceURL=webpack:///./src/Linq.ts?");

/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n * Created by Ivan Sanz (@isc30)\r\n * Copyright Â© 2017 Ivan Sanz Carasa. All rights reserved.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*export function Lazy<T>(factory: () => T): () => T\r\n{\r\n    let instance: T;\r\n    \r\n    return () => instance !== undefined\r\n        ? instance\r\n        : (instance = factory());\r\n}*/\r\nvar Cached = /** @class */ (function () {\r\n    function Cached() {\r\n        this._isValid = false;\r\n    }\r\n    Cached.prototype.invalidate = function () {\r\n        this._isValid = false;\r\n    };\r\n    Cached.prototype.isValid = function () {\r\n        return this._isValid;\r\n    };\r\n    Object.defineProperty(Cached.prototype, \"value\", {\r\n        get: function () {\r\n            if (!this._isValid) {\r\n                throw new Error(\"Trying to get value of invalid cache\");\r\n            }\r\n            return this._value;\r\n        },\r\n        set: function (value) {\r\n            this._value = value;\r\n            this._isValid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cached;\r\n}());\r\nexports.Cached = Cached;\r\n\n\n//# sourceURL=webpack:///./src/Utils.ts?");

/***/ }),

/***/ "./src/WebLinq.ts":
/*!************************!*\
  !*** ./src/WebLinq.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LinqCollection = __webpack_require__(/*! ./Linq */ \"./src/Linq.ts\");\r\nwindow.LinqCollection = __assign({}, window.LinqCollection, LinqCollection);\r\n\n\n//# sourceURL=webpack:///./src/WebLinq.ts?");

/***/ }),

/***/ 0:
/*!******************************!*\
  !*** multi ./src/WebLinq.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/WebLinq.ts */\"./src/WebLinq.ts\");\n\n\n//# sourceURL=webpack:///multi_./src/WebLinq.ts?");

/***/ })

/******/ });